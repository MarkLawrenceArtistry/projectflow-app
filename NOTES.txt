import { store } from './store.js';
import { ui } from './ui.js';
import { gantt } from './gantt.js';

// --- Firebase Initialization ---
const firebaseConfig = {
    apiKey: "AIzaSyBmmay0UwmMGVvZJoLmEoCoA5Z_dd5ktRc",
    authDomain: "projectflow-app-927ba.firebaseapp.com",
    projectId: "projectflow-app-927ba",
    storageBucket: "projectflow-app-927ba.appspot.com",
    messagingSenderId: "976170855110",
    appId: "1:976170855110:web:273f663617ce4b214205c7"
};

firebase.initializeApp(firebaseConfig);
const db = firebase.database();

class App {
    constructor() {
        this.currentView = 'dashboard';
        this.currentMemberId = null;
        this.mainAppInitialized = false; // Flag to ensure listeners are set only once
    }

    // --- AUTHENTICATION UI FLOW ---
    showLogin(showLoginForm = true) {
        document.getElementById('app-container').style.display = 'none';
        document.getElementById('auth-view').style.display = 'flex';
        if (showLoginForm) {
            document.getElementById('login-container').style.display = 'block';
            document.getElementById('register-container').style.display = 'none';
        } else {
            document.getElementById('login-container').style.display = 'none';
            document.getElementById('register-container').style.display = 'block';
        }
        this.setupAuthEventListeners();
    }

    showMainApp() {
        document.getElementById('auth-view').style.display = 'none';
        document.getElementById('app-container').style.display = 'grid';
    }

    initMainApp() {
        this.render();

        // Then, if we haven't set up the main listeners yet, set them up.
        if (!this.mainAppInitialized) {
            this.setupMainAppEventListeners();
            this.mainAppInitialized = true;
        }
    }

    // PINPOINT: app.js -> App class -> render method
    render() {
        ui.showLoader();
        const currentUser = store.currentUser;
        if (!currentUser) { ui.hideLoader(); return; }

        // --- ROLE-BASED UI CONTROL ---
        document.getElementById('current-user-info').textContent = `${currentUser.name} (${currentUser.role})`;
        document.getElementById('admin-nav-link').style.display = currentUser.role === 'admin' ? 'block' : 'none';
        
        const isPrivileged = currentUser.role === 'admin' || currentUser.role === 'leader';
        document.getElementById('current-user-info').textContent = `${currentUser.name} (${currentUser.role})`;
        document.getElementById('admin-nav-link').style.display = currentUser.role === 'admin' ? 'block' : 'none';
        document.getElementById('projects-admin-nav-link').style.display = isPrivileged ? 'block' : 'none';
        document.querySelectorAll('.btn-primary').forEach(btn => { btn.style.display = isPrivileged ? 'inline-block' : 'none'; });
        document.getElementById('task-filter-member').style.display = isPrivileged ? 'inline-block' : 'none';
         const visibleProjects = store.getVisibleProjects();
        const project = store.getActiveProject();
        ui.renderProjects(visibleProjects, store.activeProjectId);

        if (!project && this.currentView !== 'projects-admin') {
            ui.clearAllDataViews();
            document.getElementById('gantt-chart-container').innerHTML = '';
            ui.hideLoader();
            return;
        }

        let team = project ? store.getProjectTeamMembers() : [];
        let tasks = project ? project.tasks : [];
        if (currentUser.role === 'member' && project) {
            tasks = project.tasks.filter(t => t.assignedTo === currentUser.id);
        }

        // PINPOINT: app.js -> App class -> render method (REPLACE this entire object)
        const viewRenderers = {
            dashboard: () => ui.renderDashboard(project),
            team: () => ui.renderTeam(team, tasks, currentUser),
            tasks: () => {
                ui.renderTaskFilters(team, tasks);
                let filteredTasks = [...tasks];
                if (isPrivileged) {
                    const memberFilter = document.getElementById('task-filter-member').value;
                    if (memberFilter !== 'all') { filteredTasks = filteredTasks.filter(t => t.assignedTo === memberFilter); }
                }
                const priorityFilter = document.getElementById('task-filter-priority').value;
                const categoryFilter = document.getElementById('task-filter-category').value;
                if (priorityFilter !== 'all') { filteredTasks = filteredTasks.filter(t => t.priority === priorityFilter); }
                if (categoryFilter !== 'all') { filteredTasks = filteredTasks.filter(t => t.category === categoryFilter); }
                ui.renderTasks(filteredTasks, team, currentUser);
            },
            milestones: () => ui.renderMilestones(project.milestones, currentUser),
            status: () => ui.renderStatus(project.statusItems, currentUser),
            risks: () => ui.renderRisks(project.risks, currentUser),
            gantt: () => gantt.render(project),
            settings: () => { /* Renders nothing, the view is static HTML */ },
            admin: () => ui.renderAdminView(store.getAllUsers(), currentUser),
            'projects-admin': () => ui.renderProjectsAdminView(store.projects, currentUser),
            
            // THE FIX IS HERE: We now correctly retrieve the specific member's data.
            'team-member-profile': () => {
                const member = store.getMember(this.currentMemberId);
                const memberTasks = project.tasks.filter(t => t.assignedTo === this.currentMemberId);
                ui.renderTeamMemberProfile(member, memberTasks);
            }
        };
        ui.switchView(this.currentView);
        if (viewRenderers[this.currentView]) { viewRenderers[this.currentView](); }
        ui.hideLoader();
    }

    // --- EVENT LISTENERS ---
    setupAuthEventListeners() {
        document.getElementById('login-form').addEventListener('submit', e => { e.preventDefault(); store.login(document.getElementById('login-email').value, document.getElementById('login-password').value); });
        document.getElementById('register-form').addEventListener('submit', e => { e.preventDefault(); store.register(document.getElementById('register-name').value, document.getElementById('register-email').value, document.getElementById('register-password').value); });
        document.getElementById('show-register').addEventListener('click', e => { e.preventDefault(); this.showLogin(false); });
        document.getElementById('show-login').addEventListener('click', e => { e.preventDefault(); this.showLogin(true); });
    }

    setupMainAppEventListeners() {
        if (this.mainAppInitialized) return;

        // --- GENERAL APP LISTENERS (Always present) ---
        document.getElementById('logout-btn').addEventListener('click', () => store.logout());
        document.querySelector('.sidebar-nav').addEventListener('click', e => {
            const link = e.target.closest('.nav-link');
            if (link) {
                e.preventDefault();
                this.currentView = link.dataset.view;
                this.render();
            }
        });
        const mobileMenuBtn = document.getElementById('mobile-menu-toggle');
        const sidebar = document.getElementById('sidebar');
        mobileMenuBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            sidebar.classList.toggle('open');
        });
        ui.projectSelector.addEventListener('change', e => store.setActiveProject(e.target.value));

        document.getElementById('main-content').addEventListener('click', e => {
            if (e.target.id === 'back-to-team-btn') {
                this.currentView = 'team';
                this.render();
                return;
            }

            // Admin View actions
            if (e.target.closest('#admin-view')) {
                const item = e.target.closest('[data-id]');
                if (!item) return;

                const id = item.dataset.id;
                if (e.target.closest('.edit-btn')) {
                    this.handleUserForm(id);
                }
                if (e.target.closest('.delete-btn')) {
                    this.handleUserDelete(id);
                }
            }

            // Team View actions (including click on card to view profile)
            if (e.target.closest('#team-view')) {
                const memberCard = e.target.closest('.team-member-card');
                if (!memberCard) return;
                const memberId = memberCard.dataset.id;
                if (e.target.closest('.edit-btn')) this.handleMemberProfileForm(memberId);
                else if (e.target.closest('.delete-btn')) this.handleMemberFromProjectDelete(memberId);
                else if (store.currentUser.role !== 'member') this.handleMemberClick(memberId);
                return;
            }

            // Tasks View actions
            if (e.target.closest('#tasks-view')) {
                const taskItem = e.target.closest('.task-item');
                if (!taskItem) return;
                const taskId = taskItem.dataset.id;
                if (e.target.closest('.edit-btn')) this.handleTaskForm(taskId);
                else if (e.target.closest('.delete-btn')) this.handleTaskDelete(taskId);
                else if (e.target.matches('.task-item-checkbox')) this.handleTaskToggle(taskId);
                return;
            }

            // Milestones, Status, Risks, Projects Admin...
            const views = ['milestones', 'status', 'risks', 'projects-admin'];
            for (const view of views) {
                if (e.target.closest(`#${view}-view`)) {
                    const item = e.target.closest('[data-id]');
                    if (!item) return;
                    const id = item.dataset.id;
                    const handlerMap = {
                        milestones: { edit: this.handleMilestoneForm, del: this.handleMilestoneDelete },
                        status: { edit: this.handleStatusForm, del: this.handleStatusDelete },
                        risks: { edit: this.handleRiskForm, del: this.handleRiskDelete },
                        'projects-admin': { edit: this.handleProjectForm, del: this.handleProjectDelete }
                    };
                    if (e.target.closest('.edit-btn')) handlerMap[view].edit.call(this, id);
                    if (e.target.closest('.delete-btn')) handlerMap[view].del.call(this, id);
                    return;
                }
            }
        });

        // --- LISTENERS FOR STATIC ELEMENTS WITHIN VIEWS (like forms, tabs, etc.) ---
        const setupListener = (id, event, handler) => {
            const el = document.getElementById(id);
            if (el) el.addEventListener(event, handler);
        };
        
        // "Add" buttons
        setupListener('add-user-btn', 'click', () => this.handleUserForm());
        setupListener('add-member-to-project-btn', 'click', () => this.handleMemberProfileForm());
        setupListener('add-task-btn', 'click', () => this.handleTaskForm());
        setupListener('add-milestone-btn', 'click', () => this.handleMilestoneForm());
        setupListener('add-status-item-btn', 'click', () => this.handleStatusForm());
        setupListener('add-risk-btn', 'click', () => this.handleRiskForm());
        setupListener('add-gantt-phase-btn', 'click', () => this.handleGanttPhaseForm());
        setupListener('add-project-admin-btn', 'click', () => this.handleProjectForm());

        setupListener('task-filter-member', 'change', () => this.render());
        setupListener('task-filter-priority', 'change', () => this.render());
        setupListener('task-filter-category', 'change', () => this.render());
        
        // Settings form
        setupListener('change-password-form', 'submit', e => {
            e.preventDefault();
            this.handleChangePassword();
        });

        // Task Tabs
        const taskTabs = document.querySelector('#tasks-view .tabs');
        if (taskTabs) {
            taskTabs.addEventListener('click', e => {
                if (e.target.matches('.tab-link')) {
                    taskTabs.querySelectorAll('.tab-link').forEach(tab => tab.classList.remove('active'));
                    e.target.classList.add('active');
                    const taskView = document.getElementById('tasks-view');
                    taskView.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
                    document.getElementById(`task-list-${e.target.dataset.tab}`).classList.add('active');
                }
            });
        }
        
        // Modal
        setupListener('modal-container', 'click', e => {
            if (e.target.id === 'modal-close-btn' || e.target.classList.contains('modal-backdrop')) {
                ui.closeModal();
            }
        });

        this.mainAppInitialized = true;
    }
        // PINPOINT: app.js -> App class (add this new method)
    handleMemberClick(memberId) {
        this.currentView = 'team-member-profile';
        this.currentMemberId = memberId;
        this.render();
    }

    handleProjectForm(id) {
        const isEdit = !!id;
        const project = isEdit ? store.projects.find(p => p.id === id) : {};
        ui.openModal(isEdit ? 'Edit Project' : 'Add New Project', ui.createProjectForm(project));
        document.getElementById('form').addEventListener('submit', e => {
            e.preventDefault();
            const name = document.getElementById('name').value;
            if (isEdit) {
                store.updateProject(id, { name });
            } else {
                store.addProject(name);
            }
            ui.closeModal();
        });
    }
    
    handleProjectDelete(id) {
        const project = store.projects.find(p => p.id === id);
        if (project && confirm(`Delete project "${project.name}"? This is irreversible.`)) {
            store.deleteProject(id);
        }
    }
    // PINPOINT: app.js -> App class (add this new method)
    handleGanttPhaseForm() {
        ui.openModal('Create New Phase', ui.createGanttPhaseForm());
        document.getElementById('form').addEventListener('submit', e => {
            e.preventDefault();
            const data = {
                name: document.getElementById('name').value,
                startDate: document.getElementById('start').value,
                endDate: document.getElementById('end').value,
                color: document.getElementById('color').value
            };
            store.addGanttPhase(data);
            ui.closeModal();
        });
    }
    // PINPOINT: app.js -> App class (add this new method)
    handleChangePassword() {
        const newPass = document.getElementById('new-password').value;
        const confirmPass = document.getElementById('confirm-password').value;

        if (newPass.length < 6) {
            alert('Password must be at least 6 characters long.');
            return;
        }

        if (newPass !== confirmPass) {
            alert('Passwords do not match.');
            return;
        }

        store.changePassword(newPass);
        // Clear the form fields after submission
        document.getElementById('new-password').value = '';
        document.getElementById('confirm-password').value = '';
    }
    // --- FORM & DELETE HANDLERS ---
    handleUserForm(id) { const isEdit = !!id; const user = isEdit ? store.getAllUsers().find(u => u.id === id) : {}; ui.openModal(isEdit ? 'Edit User' : 'Add New User', ui.createUserForm(user)); document.getElementById('form').addEventListener('submit', e => { e.preventDefault(); const data = { name: document.getElementById('name').value, email: document.getElementById('email').value, role: document.getElementById('role').value }; const password = document.getElementById('password').value; if (password) { data.password = password; } if (isEdit) store.updateUser(id, data); else store.addUser(data); ui.closeModal(); }); }
    handleUserDelete(id) { const user = store.getAllUsers().find(u => u.id === id); if (user && confirm(`Permanently delete user ${user.name}? This cannot be undone.`)) { store.deleteUser(id); } }
    // PINPOINT: app.js -> App class -> handleAddMemberToProjectForm method (REPLACE IT)
        // PINPOINT: app.js -> App class (REPLACE this method)
    handleMemberProfileForm(id) {
        const isEdit = !!id;
        const allUsers = store.getAllUsers();
        const teamMembers = store.getProjectTeamMembers();
        const profileToEdit = isEdit ? store.getMember(id) : {};
        if (isEdit && profileToEdit) { profileToEdit.userId = profileToEdit.id; }

        ui.openModal(isEdit ? 'Edit Member Profile' : 'Add Member to Project', ui.createMemberProfileForm(allUsers, teamMembers, profileToEdit));
        
        const form = document.getElementById('form');
        if (form) {
            // THE FIX IS HERE: Logic for the new emoji preview
            const avatarInput = document.getElementById('avatar');
            const avatarPreview = document.getElementById('avatar-preview');
            if(avatarInput && avatarPreview) {
                avatarInput.addEventListener('input', () => {
                    avatarPreview.textContent = avatarInput.value || '👤';
                });
            }

            form.addEventListener('submit', e => {
                e.preventDefault();
                ui.showLoader();
                const userId = document.getElementById('member-select').value;
                const profileRole = document.getElementById('role').value;
                const avatar = document.getElementById('avatar').value || '👤';
                store.addMemberToProject(userId, profileRole, avatar);
                ui.closeModal();
                ui.hideLoader();
            });
        }
    }
    handleMemberFromProjectDelete(id) { const member = store.getMember(id); if (member && confirm(`Remove ${member.name} from this project?`)) { store.removeMemberFromProject(id); } }
    handleTaskForm(id){const i=!!id,t=i?store.getTask(id):void 0;const team=store.getProjectTeamMembers();ui.openModal(i?'Edit Task':'Add Task',ui.createTaskForm(team,t)),document.getElementById('form').addEventListener('submit',e=>{e.preventDefault();const s={name:document.getElementById('name').value,description:document.getElementById('desc').value,assignedTo:document.getElementById('assign').value,startDate:document.getElementById('start').value,endDate:document.getElementById('end').value,category:document.getElementById('cat').value.trim(),priority:document.getElementById('priority').value};i?store.updateTask(id,s):store.addTask(s),ui.closeModal()});}
    handleTaskDelete(id) { const t = store.getTask(id); if (t && confirm(`Delete task "${t.name}"?`)) { store.deleteTask(id); } }
    handleTaskToggle(id){store.toggleTaskCompletion(id);}
    handleMilestoneForm(id){const i=!!id,t=i?store.getMilestone(id):void 0;ui.openModal(i?'Edit Milestone':'Add Milestone',ui.createMilestoneForm(t)),document.getElementById('form').addEventListener('submit',e=>{e.preventDefault();const s={name:document.getElementById('name').value,startDate:document.getElementById('start').value,endDate:document.getElementById('end').value};i?store.updateMilestone(id,s):store.addMilestone(s),ui.closeModal()});}
    handleMilestoneDelete(id) { const t = store.getMilestone(id); if (t && confirm(`Delete milestone "${t.name}"?`)) { store.deleteMilestone(id); } }
    handleStatusForm(id) {
        const isEdit = !!id;
        const statusItem = isEdit ? store.getStatusItem(id) : {}; // Correctly get the specific item

        ui.openModal(isEdit ? 'Edit Status' : 'Add Status', ui.createStatusForm(statusItem));
        
        const progressSlider = document.getElementById('progress');
        const progressValueSpan = document.getElementById('progress-val');
        
        // This listener updates the percentage text as you move the slider
        if (progressSlider && progressValueSpan) {
            progressSlider.addEventListener('input', () => {
                progressValueSpan.textContent = `${progressSlider.value}%`;
            });
        }

        document.getElementById('form').addEventListener('submit', e => {
            e.preventDefault();
            const data = {
                name: document.getElementById('name').value,
                progress: document.getElementById('progress').value,
                color: document.getElementById('color').value
            };
            if (isEdit) {
                store.updateStatusItem(id, data);
            } else {
                store.addStatusItem(data);
            }
            ui.closeModal();
        });
    }
    handleStatusDelete(id) { const t = store.getStatusItem(id); if (t && confirm(`Delete status "${t.name}"?`)) { store.deleteStatusItem(id); } }
    handleRiskForm(id){const i=!!id,r=i?store.getRisk(id):undefined;ui.openModal(i?'Edit Risk':'Add Risk',ui.createRiskForm(r));document.getElementById('form').addEventListener('submit',e=>{e.preventDefault();const d={description:document.getElementById('desc').value,impact:document.getElementById('impact').value,priority:document.getElementById('priority').value};if(i)store.updateRisk(id,d);else store.addRisk(d);ui.closeModal();});}
    handleRiskDelete(id) { if (confirm('Delete this risk?')) { store.deleteRisk(id); } }
}
function updateOnlineStatus() {
    if (navigator.onLine) {
        document.body.classList.remove('offline');
    } else {
        document.body.classList.add('offline');
    }
}
window.addEventListener('online', updateOnlineStatus);
window.addEventListener('offline', updateOnlineStatus);
updateOnlineStatus();
// --- App Initialization ---
const app = new App();
store.init(db, app);

class Task { constructor(id, name, description, assignedTo, startDate, endDate, category, priority, completed = false) { this.id = id; this.name = name; this.description = description; this.assignedTo = assignedTo; this.startDate = startDate; this.endDate = endDate; this.category = category; this.priority = priority; this.completed = completed; } }
class TeamMember { constructor(id, name, role, avatar) { this.id = id; this.name = name; this.role = role; this.avatar = avatar; } }
class Milestone { constructor(id, name, startDate, endDate) { this.id = id; this.name = name; this.startDate = startDate; this.endDate = endDate; } }
class StatusItem { constructor(id, name, progress, color) { this.id = id; this.name = name; this.progress = progress; this.color = color; } }
class GanttPhase { constructor(id, name, startDate, endDate, color) { this.id = id; this.name = name; this.startDate = startDate; this.endDate = endDate; this.color = color || '#e74c3c';} }
class Risk { constructor(id, description, impact, priority) { this.id = id; this.description = description; this.impact = impact; this.priority = priority; } }
class Project { constructor(id, name) { this.id = id; this.name = name; this.tasks = []; this.team = {}; this.milestones = []; this.statusItems = []; this.ganttPhases = []; this.risks = []; } }
class User { constructor(id, name, email, password, role = 'member') { this.id = id; this.name = name; this.email = email; this.password = password; this.role = role; }}

class Store {
    constructor() {
        this.db = null;
        this.app = null;
        
        this.users = [];
        this.currentUser = null;
        
        this.projects = [];
        this.activeProjectId = null;
        this.dataLoaded = false;
    }

    init(db, app) {
        this.db = db;
        this.app = app;
        
        // First, check for a logged-in user in the session
        this.checkSession();
    }
    
    // --- AUTHENTICATION AND SESSION ---

    checkSession() {
        const userId = sessionStorage.getItem('projectflow_userId');
        if (userId) {
            this.db.ref(`/users/${userId}`).once('value', (snapshot) => {
                this.currentUser = snapshot.val();
                if (this.currentUser) {
                    // THE FIX IS HERE: First, make the main app visible.
                    this.app.showMainApp();
                    // THEN, start listening for data, which will trigger the first render.
                    this.initFirebaseListeners();
                } else {
                    this.logout();
                }
            });
        } else {
            this.app.showLogin();
        }
    }

    login(email, password) {
        this.db.ref('/users').orderByChild('email').equalTo(email).once('value', (snapshot) => {
            if (snapshot.exists()) {
                const userId = Object.keys(snapshot.val())[0];
                const user = snapshot.val()[userId];

                if (user.password === password) { // WARNING: Insecure password check
                    this.currentUser = user;
                    sessionStorage.setItem('projectflow_userId', user.id);
                    this.app.showMainApp();
                    this.initFirebaseListeners();
                } else {
                    alert('Incorrect password.');
                }
            } else {
                alert('User with that email does not exist.');
            }
        });
    }

    register(name, email, password) {
        this.db.ref('/users').orderByChild('email').equalTo(email).once('value', (snapshot) => {
            if (snapshot.exists()) {
                alert('A user with this email already exists.');
            } else {
                const newUserId = `user_${Date.now()}`;
                const newUser = new User(newUserId, name, email, password, 'member'); // Default role is member
                this.db.ref(`/users/${newUserId}`).set(newUser).then(() => {
                    alert('Registration successful! Please log in.');
                    this.app.showLogin(true); // Switch to login form
                });
            }
        });
    }
    
    logout() {
        sessionStorage.removeItem('projectflow_userId');
        this.currentUser = null;
        // This will reload the page and the checkSession() will redirect to login
        window.location.reload();
    }
    // PINPOINT: store.js -> Store class (add this new method)
    changePassword(newPassword) {
        if (!this.currentUser) return;
        
        const userId = this.currentUser.id;
        this.db.ref(`/users/${userId}/password`).set(newPassword)
            .then(() => {
                alert('Password updated successfully!');
            })
            .catch(error => {
                alert('An error occurred. Could not update password.');
                console.error("Password update error:", error);
            });
    }

    updateProject(id, data) {
        // 'data' will be an object like { name: "New Project Name" }
        this.db.ref(`projects/${id}`).update(data);
    }

    initFirebaseListeners() {
        this.db.ref('/').on('value', (snapshot) => {
            const data = snapshot.val() || {}; // Ensure data is an object

            this.users = data.users ? Object.values(data.users) : [];

            if (data.projects) {
                this.projects = Object.values(data.projects).map(pData => {
                    const project = new Project(pData.id, pData.name);
                    project.team = pData.team || {};
                    project.tasks = pData.tasks ? Object.values(pData.tasks) : [];
                    project.milestones = pData.milestones ? Object.values(pData.milestones) : [];
                    project.statusItems = pData.statusItems ? Object.values(pData.statusItems) : [];
                    project.ganttPhases = pData.ganttPhases ? Object.values(pData.ganttPhases) : [];
                    project.risks = pData.risks ? Object.values(pData.risks) : [];
                    return project;
                });
                // Get the active project ID from the database.
                this.activeProjectId = data.activeProjectId || null;
            } else {
                this.projects = [];
                this.activeProjectId = null;
            }

            // --- REVISED LOGIC TO PREVENT RESETTING THE PROJECT ---
            const visibleProjects = this.getVisibleProjects();
            const activeProjectIsVisible = this.activeProjectId && visibleProjects.some(p => p.id === this.activeProjectId);

            if (!activeProjectIsVisible && visibleProjects.length > 0) {
                // The active project is invalid or not set, but other projects are available.
                // Default to the first one. This will trigger the listener again.
                this.setActiveProject(visibleProjects[0].id);
                return; // Exit to wait for the listener to re-run with the correct project.
            } else if (visibleProjects.length === 0 && this.currentUser.role !== 'member') {
                // No projects exist for this privileged user. Create a default one.
                this.addProject("My First Project");
                return; // Exit to wait for the listener to re-run.
            }

            if (!this.dataLoaded) {
                this.dataLoaded = true;
                this.app.initMainApp();
            } else {
                this.app.render();
            }
        });
    }

    // --- USER MANAGEMENT (ADMIN) ---
    getAllUsers() {
        return this.users;
    }
    addUser(data) {
        const id = `user_${Date.now()}`;
        const newUser = new User(id, data.name, data.email, data.password, data.role);
        this.db.ref(`/users/${id}`).set(newUser);
    }
    updateUser(id, data) {
        this.db.ref(`/users/${id}`).update(data);
    }
    deleteUser(id) {
        // Here you would also want to remove the user from all project teams
        this.db.ref(`/users/${id}`).remove();
    }

    // --- DATA GETTERS WITH ROLE-BASED FILTERING ---
    getVisibleProjects() {
        if (!this.currentUser) return [];
        if (this.currentUser.role === 'admin' || this.currentUser.role === 'leader') {
            return this.projects;
        }
        // For members, only return projects they are part of
        return this.projects.filter(p => p.team && p.team[this.currentUser.id]);
    }

    getActiveProject() {
        const visibleProjects = this.getVisibleProjects();
        if (!this.activeProjectId || !visibleProjects.some(p => p.id === this.activeProjectId)) return null;
        return this.projects.find(p => p.id === this.activeProjectId);
    }
    
        // PINPOINT: store.js -> Store class -> getProjectTeamMembers method
        getProjectTeamMembers() {
        const project = this.getActiveProject();
        if (!project || !project.team) return [];
        
        return Object.values(project.team)
            .map(profile => {
                const user = this.users.find(u => u.id === profile.userId);
                // If the user was deleted but still exists in the project, 'user' will be undefined.
                if (!user) {
                    return null; // Mark this profile for removal
                }
                return {
                    ...user,
                    profileRole: profile.profileRole,
                    avatar: profile.avatar
                };
            })
            .filter(Boolean); // This is a clever trick to remove all null/undefined items from the array.
    }

    // PINPOINT: store.js -> Store class -> addMemberToProject method
    addMemberToProject(userId, profileRole, avatar) {
        const profileData = {
            userId: userId,
            profileRole: profileRole,
            avatar: avatar || ''
        };
        // Use the userId as the key for the profile in the team object
        this.db.ref(`projects/${this.activeProjectId}/team/${userId}`).set(profileData);
    }

    // PINPOINT: store.js -> Store class -> removeMemberFromProject method
    removeMemberFromProject(userId) {
        this.db.ref(`projects/${this.activeProjectId}/team/${userId}`).remove();
    }
    
    // PINPOINT: store.js -> Store class -> getMember method
    getMember(id) {
        // This now correctly gets the full merged profile (user data + project profile)
        return this.getProjectTeamMembers().find(m => m.id === id);
    }

    // --- PROJECT & ITEM CRUD ---
    setActiveProject(id) {
        this.activeProjectId = id;
        this.db.ref('activeProjectId').set(id);
    }
    addProject(name) {
        const newProjectRef = this.db.ref('projects').push();
        const projectData = { id: newProjectRef.key, name: name };
        newProjectRef.set(projectData);
        this.setActiveProject(newProjectRef.key);
    }
    deleteProject(id) {
        if (this.projects.length <= 1) {
            alert("You cannot delete the last project.");
            return;
        }
        this.db.ref(`projects/${id}`).remove();
    }

    // --- Other CRUD methods remain largely the same, just ensure they use this.activeProjectId
    addTeamMember(data) { const id = `mem_${Date.now()}`; this.db.ref(`projects/${this.activeProjectId}/team/${id}`).set(new TeamMember(id, data.name, data.role, data.avatar)); }
    updateTeamMember(id, data) { this.db.ref(`projects/${this.activeProjectId}/team/${id}`).update(data); }
    deleteTeamMember(id) { this.db.ref(`projects/${this.activeProjectId}/team/${id}`).remove(); }
    addTask(data) { const id = `task_${Date.now()}`; this.db.ref(`projects/${this.activeProjectId}/tasks/${id}`).set(new Task(id, data.name, data.description, data.assignedTo, data.startDate, data.endDate, data.category, data.priority)); }
    updateTask(id, data) { this.db.ref(`projects/${this.activeProjectId}/tasks/${id}`).update(data); }
    toggleTaskCompletion(id) { const task = this.getTask(id); if (task) { this.db.ref(`projects/${this.activeProjectId}/tasks/${id}/completed`).set(!task.completed); } }
    deleteTask(id) { this.db.ref(`projects/${this.activeProjectId}/tasks/${id}`).remove(); }
    getTask(id) { return this.getActiveProject()?.tasks.find(t => t.id === id); }
    addMilestone(d) { const id = `mile_${Date.now()}`; this.db.ref(`projects/${this.activeProjectId}/milestones/${id}`).set(new Milestone(id, d.name, d.startDate, d.endDate)); }
    updateMilestone(id, d) { this.db.ref(`projects/${this.activeProjectId}/milestones/${id}`).update(d); }
    deleteMilestone(id) { this.db.ref(`projects/${this.activeProjectId}/milestones/${id}`).remove(); }
    getMilestone(id) { return this.getActiveProject()?.milestones.find(m => m.id === id); }
    addStatusItem(d) { const id = `status_${Date.now()}`; this.db.ref(`projects/${this.activeProjectId}/statusItems/${id}`).set(new StatusItem(id, d.name, d.progress, d.color)); }
    updateStatusItem(id, d) { this.db.ref(`projects/${this.activeProjectId}/statusItems/${id}`).update(d); }
    deleteStatusItem(id) { this.db.ref(`projects/${this.activeProjectId}/statusItems/${id}`).remove(); }
    getStatusItem(id) { return this.getActiveProject()?.statusItems.find(s => s.id === id); }
    addGanttPhase(d) { const id = `gantt_${Date.now()}`; this.db.ref(`projects/${this.activeProjectId}/ganttPhases/${id}`).set(new GanttPhase(id, d.name, d.startDate, d.endDate, d.color)); }
    updateGanttPhase(id, d) { this.db.ref(`projects/${this.activeProjectId}/ganttPhases/${id}`).update(d); }
    deleteGanttPhase(id) { this.db.ref(`projects/${this.activeProjectId}/ganttPhases/${id}`).remove(); }
    getGanttPhase(id) { return this.getActiveProject()?.ganttPhases.find(p => p.id === id); }
    addRisk(d) { const id = `risk_${Date.now()}`; this.db.ref(`projects/${this.activeProjectId}/risks/${id}`).set(new Risk(id, d.description, d.impact, d.priority)); }
    updateRisk(id, d) { this.db.ref(`projects/${this.activeProjectId}/risks/${id}`).update(d); }
    deleteRisk(id) { this.db.ref(`projects/${this.activeProjectId}/risks/${id}`).remove(); }
    getRisk(id) { return this.getActiveProject()?.risks.find(r => r.id === id); }
}

export const store = new Store();

class UI {
    constructor(){this.loader=document.getElementById("loader"),this.mainContent=document.getElementById("main-content"),this.projectSelector=document.getElementById("project-selector"),this.dashboardContent=document.getElementById("dashboard-content"),this.teamGrid=document.getElementById("team-grid"),this.taskListPending=document.getElementById("task-list-pending"),this.taskListFinished=document.getElementById("task-list-finished"),this.milestoneList=document.getElementById("milestone-list"),this.statusList=document.getElementById("status-list"),this.riskTableContainer=document.getElementById("risk-table-container"),this.teamMemberProfileContent=document.getElementById("team-member-profile-content"),this.modal={container:document.getElementById("modal-container"),title:document.getElementById("modal-title"),body:document.getElementById("modal-body"),closeBtn:document.getElementById("modal-close-btn"),backdrop:document.querySelector(".modal-backdrop")}};
    showLoader(){this.loader.classList.add("visible")} hideLoader(){this.loader.classList.remove("visible")}
    switchView(viewId){this.mainContent.querySelectorAll(".view").forEach(v=>v.classList.remove("active"));const viewEl=this.mainContent.querySelector(`#${viewId}-view`);if(viewEl)viewEl.classList.add("active");document.querySelectorAll(".sidebar-nav .nav-link").forEach(l=>{l.classList.remove("active");l.dataset.view===viewId&&l.classList.add("active")})}
        renderProjects(projects, activeId) {
        this.projectSelector.innerHTML = "";
        
        // This is the new, simplified logic.
        if (projects.length === 0) {
            this.projectSelector.innerHTML = "<option>No Projects Available</option>";
        } else {
            projects.forEach(p => {
                const o = document.createElement("option");
                o.value = p.id;
                o.textContent = p.name;
                if (p.id === activeId) {
                    o.selected = true;
                }
                this.projectSelector.appendChild(o);
            });
        }
    }
    clearAllDataViews(){[this.dashboardContent,this.teamGrid,this.taskListPending,this.taskListFinished,this.milestoneList,this.statusList,this.riskTableContainer].forEach(el=>el.innerHTML="")}
    renderDashboard(p){
        if (!p) {
            this.dashboardContent.innerHTML = '<div class="card"><p>Select a project to view its dashboard.</p></div>';
            return;
        }

        const tasks = p.tasks || [];
        const statusItems = p.statusItems || [];
        const totalTasks = tasks.length;
        const completedTasksCount = tasks.filter(t => t.completed).length;
        const overallProgress = totalTasks > 0 ? Math.round(completedTasksCount / totalTasks * 100) : 0;
        const overdueTasksCount = tasks.filter(t => !t.completed && t.endDate && new Date(t.endDate) < new Date()).length;

        // --- Helper function to check if a date is in the current week (Sun-Sat) ---
        const isDateInThisWeek = (dateStr) => {
            if (!dateStr) return false;
            const taskDate = new Date(dateStr);
            const today = new Date();
            const dayOfWeek = today.getDay(); // Sunday = 0, Saturday = 6
            const startOfWeek = new Date(today.setDate(today.getDate() - dayOfWeek));
            startOfWeek.setHours(0, 0, 0, 0);
            const endOfWeek = new Date(startOfWeek);
            endOfWeek.setDate(endOfWeek.getDate() + 6);
            endOfWeek.setHours(23, 59, 59, 999);
            return taskDate >= startOfWeek && taskDate <= endOfWeek;
        };

        const tasksThisWeek = tasks
            .filter(task => !task.completed && isDateInThisWeek(task.endDate))
            .sort((a, b) => new Date(a.endDate) - new Date(b.endDate));

        let thisWeekHtml = '';
        if (tasksThisWeek.length > 0) {
            thisWeekHtml = tasksThisWeek.map(task => {
                const deadline = this.formatDate(task.endDate, true);
                return `<div class="dashboard-task-item">
                            <span>${task.name}</span>
                            <span class="task-due-date">${deadline}</span>
                        </div>`;
            }).join('');
        } else {
            thisWeekHtml = '<p class="empty-state">No tasks due this week. Great job!</p>';
        }

        let statusHtml = '';
        if (statusItems.length > 0) {
            statusHtml = statusItems.map(item => `
                <div class="dashboard-status-item">
                    <div class="dashboard-status-info">
                        <span>${item.name}</span>
                        <span style="color: ${item.color}; font-weight: 600;">${item.progress}%</span>
                    </div>
                    <div class="progress-bar-container">
                        <div class="progress-bar-fill" style="width: ${item.progress}%; background-color: ${item.color};"></div>
                    </div>
                </div>
            `).join('');
        } else {
            statusHtml = '<p class="empty-state">No development statuses defined.</p>';
        }

        this.dashboardContent.innerHTML = `
            <div class="dashboard-grid">
                <div class="card stat-card">
                    <h3>Overall Progress</h3>
                    <p class="stat-big-number">${overallProgress}%</p>
                    <div class="progress-bar-container"><div class="progress-bar-fill" style="width: ${overallProgress}%;"></div></div>
                </div>
                <div class="card stat-card">
                    <h3>Completed Tasks</h3>
                    <p class="stat-big-number">${completedTasksCount} / ${totalTasks}</p>
                    <small>Total tasks completed</small>
                </div>
                <div class="card stat-card">
                    <h3>Overdue Tasks</h3>
                    <p class="stat-big-number">${overdueTasksCount}</p>
                    <small>Tasks past their end date</small>
                </div>
                <div class="card">
                    <h3>Due This Week</h3>
                    <div class="dashboard-task-list">${thisWeekHtml}</div>
                </div>
                <div class="card">
                    <h3>Development Status</h3>
                    <div class="dashboard-status-list">${statusHtml}</div>
                </div>
            </div>`;
    }
    // PINPOINT: ui.js -> UI class -> renderTeam method
    renderTeam(team, tasks, currentUser) {
        if (!currentUser) return;
        
        this.teamGrid.innerHTML = !team || team.length === 0
        ? '<div class="card"><p>No team members assigned to this project.</p></div>'
        : team.map(member => {
            // Create a fallback emoji if one isn't provided
            const avatarEmoji = member.avatar || '👤';

            return `
            <div class="team-member-card card" data-id="${member.id}">
                <div style="display: flex; gap: 16px; align-items: center; margin-bottom: 16px;">
                    <div class="emoji-avatar">${avatarEmoji}</div>
                    <div style="flex-grow: 1;">
                        <h3>${member.name}</h3>
                        <p style="margin-bottom: 0;">${member.profileRole}</p>
                    </div>
                    ${currentUser.role !== 'member' ? `
                    <div class="item-actions" style="flex-shrink: 0;">
                        <button class="btn-icon edit-btn" data-tooltip="Edit Profile"><svg viewBox="0 0 24 24"><path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path><path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path></svg></button>
                        <button class="btn-icon delete-btn" data-tooltip="Remove from Project"><svg viewBox="0 0 24 24"><polyline points="3 6 5 6 21 6"></polyline><path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path></svg></button>
                    </div>` : ''}
                </div>
            </div>`;
        }).join("");
    }
    renderAdminView(users, currentUser) {
        const content = `
        <div class="table-container">
            <table class="styled-table">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Email</th>
                        <th>Role</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    ${users.map(u => `
                        <tr data-id="${u.id}">
                            <td>${u.name}</td>
                            <td>${u.email}</td>
                            <td>${u.role}</td>
                            <td>
                                <!-- Only show actions for other users, and not for the admin themselves -->
                                ${u.id === currentUser.id ? '' : this.createItemActionsHTML("User", currentUser)}
                            </td>
                        </tr>
                    `).join('')}
                </tbody>
            </table>
        </div>`;
        document.getElementById('admin-user-list').innerHTML = content;
    }
    createUserForm(user = {}) {
        const roles = ['admin', 'leader', 'member'];
        return `
        <form id="form" data-id="${user.id || ''}">
            <div class="form-group">
                <label for="name">Full Name</label>
                <input type="text" id="name" class="form-input" value="${user.name || ''}" required>
            </div>
            <div class="form-group">
                <label for="email">Email</label>
                <input type="email" id="email" class="form-input" value="${user.email || ''}" required>
            </div>
            <div class="form-group">
                <label for="password">Password</label>
                <input type="password" id="password" class="form-input" ${!user.id ? 'required' : ''} placeholder="${user.id ? 'Leave blank to keep same' : ''}">
            </div>
            <div class="form-group">
                <label for="role">Role</label>
                <select id="role" class="form-select">
                    ${roles.map(r => `<option value="${r}" ${user.role === r ? 'selected' : ''}>${r.charAt(0).toUpperCase() + r.slice(1)}</option>`).join('')}
                </select>
            </div>
            <button type="submit" class="btn btn-primary">Save User</button>
        </form>`;
    }

        // PINPOINT: ui.js -> UI class (add this new method)
        renderProjectsAdminView(projects, currentUser) { // <-- Added currentUser as an argument
        const content = `
        <div class="table-container">
            <table class="styled-table">
                <thead>
                    <tr>
                        <th>Project Name</th>
                        <th style="width: 120px;">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    ${projects.map(p => `
                        <tr data-id="${p.id}">
                            <td>${p.name}</td>
                            <td>
                                <!-- THE FIX IS HERE: We call the function to create the buttons -->
                                ${this.createItemActionsHTML("Project", currentUser)}
                            </td>
                        </tr>
                    `).join('')}
                </tbody>
            </table>
        </div>`;
        document.getElementById('projects-admin-list').innerHTML = content;
    }

    // PINPOINT: ui.js -> UI class (add this second new method)
    createProjectForm(project = {}) {
        return `
        <form id="form" data-id="${project.id || ''}">
            <div class="form-group">
                <label for="name">Project Name</label>
                <input type="text" id="name" class="form-input" value="${project.name || ''}" required>
            </div>
            <button type="submit" class="btn btn-primary">Save Project</button>
        </form>`;
    }
    // PINPOINT: ui.js -> UI class -> createAddMemberToProjectForm method (REPLACE IT)
        // PINPOINT: ui.js -> UI class (REPLACE this method)
    createMemberProfileForm(allUsers, teamMembers, profile = {}) {
        const teamMemberIds = teamMembers.map(tm => tm.id);
        const isEdit = !!profile.userId;

        const usersForDropdown = isEdit 
            ? allUsers.filter(u => u.id === profile.userId)
            : allUsers.filter(u => !teamMemberIds.includes(u.id));

        if (!isEdit && usersForDropdown.length === 0) {
            return `<p>All available users are already on this project team.</p>`;
        }

        return `
        <form id="form" data-id="${profile.userId || ''}">
            <div class="form-group">
                <label for="member-select">Select User</label>
                <select id="member-select" class="form-select" ${isEdit ? 'disabled' : ''}>
                    ${usersForDropdown.map(u => `<option value="${u.id}" ${profile.userId === u.id ? 'selected':''}>${u.name} (${u.role})</option>`).join('')}
                </select>
            </div>
            <div class="form-group">
                <label for="role">Role in Project</label>
                <input type="text" id="role" class="form-input" value="${profile.profileRole || ''}" required placeholder="e.g., Lead Artist, Tester">
            </div>
            <div class="form-group">
                <label for="avatar">Avatar (Emoji)</label>
                <input type="text" id="avatar" class="form-input" value="${profile.avatar || '👤'}" maxlength="2" placeholder="👤">
            </div>
            <!-- THE FIX IS HERE: We render the emoji as text, not a background image -->
            <div class="form-group">
                <label>Preview</label>
                <div class="emoji-avatar" id="avatar-preview">${profile.avatar || '👤'}</div>
            </div>
            <button type="submit" class="btn btn-primary">Save Member Profile</button>
        </form>`;
    }
    renderTasks(tasks, team, currentUser) {
        const priorityOrder = { 'High': 1, 'Medium': 2, 'Low': 3 };

        // Sort tasks by priority (High first), then by the soonest end date
        const sortedTasks = tasks.slice().sort((a, b) => {
            const priorityA = priorityOrder[a.priority] || 4;
            const priorityB = priorityOrder[b.priority] || 4;
            if (priorityA !== priorityB) {
                return priorityA - priorityB;
            }
            return new Date(a.endDate) - new Date(b.endDate);
        });

        const pendingTasks = sortedTasks.filter(t => !t.completed);
        const finishedTasks = sortedTasks.filter(t => t.completed);

        const createTaskHTML = (task) => {
            const assignee = team.find(m => m.id === task.assignedTo);
            return `<div class="task-item card" data-id="${task.id}">
                <input type="checkbox" class="task-item-checkbox" ${task.completed ? "checked" : ""}>
                <div class="task-item-info">
                    <span class="task-name ${task.completed ? "completed" : ""}">${task.name}</span>
                    <div class="task-metadata">
                        <span class="priority-pill ${task.priority.toLowerCase()}">${task.priority}</span>
                        <span>${assignee ? `👤 ${assignee.name}`: ""}</span>
                        <span>${task.category ? `📁 ${task.category}` : ""}</span>
                        <strong data-tooltip="Deadline">${this.formatDate(task.endDate, true)}</strong>
                    </div>
                </div>
                ${this.createItemActionsHTML("Task", currentUser)}
            </div>`;
        };

        this.taskListPending.innerHTML = pendingTasks.length > 0
            ? pendingTasks.map(createTaskHTML).join('')
            : '<div class="card"><p>No pending tasks.</p></div>';

        this.taskListFinished.innerHTML = finishedTasks.length > 0
            ? finishedTasks.map(createTaskHTML).join('')
            : '<div class="card"><p>No finished tasks.</p></div>';
    }
    createTaskItemHTML(task,team){const assignee=team.find(m=>m.id===task.assignedTo);return`<div class="task-item card" data-id="${task.id}"><input type="checkbox" class="task-item-checkbox" ${task.completed?"checked":""} data-tooltip="Toggle completion"><div class="task-item-info"><span class="task-name ${task.completed?"completed":""}">${task.name}</span><div class="task-metadata"><span class="priority-pill ${task.priority.toLowerCase()}">${task.priority}</span><span>${assignee?`👤 ${assignee.name}`:""}</span><span>${task.category?`📁 ${task.category}`:""}</span><strong data-tooltip="Deadline">${this.formatDate(task.endDate,!0)}</strong></div></div><div class="item-actions">${this.createItemActionsHTML("Task")}</div></div>`}
    renderMilestones(milestones, currentUser) {
        this.milestoneList.innerHTML = !milestones || milestones.length === 0
            ? '<div class="card"><p>No milestones.</p></div>'
            : milestones.sort((a,b) => new Date(a.startDate) - new Date(b.startDate))
              .map(m => `
                <div class="milestone-item card" data-id="${m.id}">
                    <div>
                        <h3>${m.name}</h3>
                        <p>${this.formatDate(m.startDate, true)} - ${this.formatDate(m.endDate, true)}</p>
                    </div>
                    ${this.createItemActionsHTML("Milestone", currentUser)}
                </div>`).join("");
    }
    renderStatus(items, currentUser) {
        this.statusList.innerHTML = !items || items.length === 0 
            ? '<div class="card"><p>No status items.</p></div>' 
            : items.map(i => `
                <div class="status-item card" data-id="${i.id}">
                    <div class="status-item-info">
                        <span class="status-item-name">${i.name}</span>
                        <span class="status-item-percentage-text">${i.progress}% Complete</span>
                    </div>
                    <div class="status-progress-bar-container">
                        <div class="status-progress-bar-fill" style="width: ${i.progress}%; background-color: ${i.color};"></div>
                    </div>
                    ${this.createItemActionsHTML("Status Item", currentUser)}
                </div>
            `).join('');
    }
        // PINPOINT: ui.js -> UI class (add this new method)
    renderTeamMemberProfile(member, tasks) {
        if (!member) {
            this.teamMemberProfileContent.innerHTML = "<p>Member not found.</p>";
            return;
        }

        const completedTasks = tasks.filter(t => t.completed);
        const onTime = completedTasks.filter(t => {
            if (!t.endDate) return true;
            const due = new Date(t.endDate);
            // This is a simplified check; a real app would use the completion date
            const completedAt = new Date();
            return due >= completedAt;
        }).length;
        
        const performance = completedTasks.length > 0 ? Math.round((onTime / completedTasks.length) * 100) : 100;
        let rating, ratingClass;
        if (performance >= 90) { rating = "Excellent"; ratingClass = "excellent"; }
        else if (performance >= 70) { rating = "Good"; ratingClass = "good"; }
        else { rating = "Needs Improvement"; ratingClass = "needs-improvement"; }

        this.teamMemberProfileContent.innerHTML = `
            <header class="view-header">
                <button id="back-to-team-btn" class="btn">< Back to Team</button>
            </header>
            <div class="profile-header card">
                <div class="emoji-avatar" style="width: 100px; height: 100px; font-size: 4rem;">${member.avatar || '👤'}</div>
                <div class="profile-info">
                    <h2>${member.name}</h2>
                    <p>${member.profileRole}</p>
                    <p class="profile-rating ${ratingClass}">
                        Performance: ${rating} (${performance}%)
                    </p>
                </div>
            </div>
            <h3>Assigned Tasks (${tasks.length})</h3>
            <div class="table-container card">
                <table class="styled-table">
                    <thead>
                        <tr>
                            <th>Status</th>
                            <th>Task</th>
                            <th>Priority</th>
                            <th>Deadline</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${tasks.length > 0 ? tasks.map(t => `
                        <tr>
                            <td>${t.completed ? "✅" : "⏳"}</td>
                            <td>${t.name}</td>
                            <td><span class="priority-pill ${t.priority.toLowerCase()}">${t.priority}</span></td>
                            <td>${this.formatDate(t.endDate, true)}</td>
                        </tr>`).join('') : `<tr><td colspan="4" style="text-align:center">No tasks assigned.</td></tr>`}
                    </tbody>
                </table>
            </div>`;
    }
    renderRisks(risks){let content;if(!risks||risks.length===0){content='<div class="card"><p>No risks documented.</p></div>'}else{content=`<div class="table-container card"><table class="styled-table"><thead><tr><th>Priority</th><th>Description</th><th>Impact</th><th>Actions</th></tr></thead><tbody>${risks.map(r=>`<tr><td class="priority-cell"><span class="priority-pill ${r.priority.toLowerCase()}">${r.priority}</span></td><td>${r.description}</td><td>${r.impact}</td><td><div class="item-actions" data-id="${r.id}">${this.createItemActionsHTML("Risk")}</div></td></tr>`).join("")}</tbody></table></div>`}this.riskTableContainer.innerHTML=content}
    renderTeamMemberProfile(member,tasks){if(!member){this.teamMemberProfileContent.innerHTML="<p>Member not found.</p>";return}const completedTasks=tasks.filter(t=>t.completed);const onTime=completedTasks.filter(t=>{if(!t.endDate)return!0;const due=new Date(t.endDate);const completedAt=new Date;return due>=completedAt}).length;const performance=completedTasks.length>0?Math.round(onTime/completedTasks.length*100):100;let rating,ratingClass;performance>=90?(rating="Excellent",ratingClass="excellent"):performance>=70?(rating="Good",ratingClass="good"):(rating="Needs Improvement",ratingClass="needs-improvement");this.teamMemberProfileContent.innerHTML=`<header class="view-header"><button id="back-to-team-btn" class="btn">< Back to Team</button></header><div class="profile-header card"><div class="profile-avatar">${this.createAvatarHTML(member,"team-member-avatar")}</div><div class="profile-info"><h2>${member.name}</h2><p>${member.role}</p><p class="profile-rating ${ratingClass}">${rating} Performance (${performance}%)</p></div></div><h3>Assigned Tasks (${tasks.length})</h3><div class="table-container card"><table class="styled-table"><thead><tr><th>Status</th><th>Task</th><th>Priority</th><th>Deadline</th></tr></thead><tbody>${tasks.length>0?tasks.map(t=>`<tr><td>${t.completed?"✅":"⏳"}</td><td>${t.name}</td><td><span class="priority-pill ${t.priority.toLowerCase()}">${t.priority}</span></td><td>${this.formatDate(t.endDate,!0)}</td></tr>`).join(""):`<tr><td colspan="4" style="text-align:center">No tasks assigned.</td></tr>`}</tbody></table></div>`}
    createAvatarHTML(m,c,t=""){const tt=t?`data-tooltip="${t}"`:"";return m.avatar?`<img src="${m.avatar}" alt="${m.name}" class="${c}" ${tt}>`:`<div class="${c.replace("avatar","icon-fallback")}" ${tt}><svg viewBox="0 0 24 24"><path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path><circle cx="12" cy="7" r="4"></circle></svg></div>`}
    createItemActionsHTML(type, currentUser) {
        // If there's no user or the user is a member, don't show any buttons
        if (!currentUser || currentUser.role === 'member') {
            return '';
        }
        
        // Only Admins and Leaders will see these buttons
        return `
        <div class="item-actions">
            <button class="btn-icon edit-btn" data-tooltip="Edit ${type}">
                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path><path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path></svg>
            </button>
            <button class="btn-icon delete-btn" data-tooltip="Delete ${type}">
                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="3 6 5 6 21 6"></polyline><path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path></svg>
            </button>
        </div>`;
    }
    createMemberForm(m={}){return`<form id="form" data-id="${m.id}"><div class=form-group><label for=name>Name</label><input type=text id=name class=form-input value="${m.name||""}" required></div><div class=form-group><label for=role>Role</label><input type=text id=role class=form-input value="${m.role||""}" required></div><div class=form-group><label>Avatar</label><label for=avatarFile class=custom-file-upload>Choose File</label><input type=file id=avatarFile accept="image/*"><div class=avatar-preview style="background-image: url('${m.avatar||""}')"></div></div><button type=submit class="btn btn-primary">Save Member</button></form>`}
    createTaskForm(team,t={}){const priorities=["Low","Medium","High"];return`<form id="form" data-id="${t.id}"><div class=form-group><label for=name>Task Name</label><input type=text id=name class=form-input value="${t.name||""}" required></div><div class=form-group><label for=desc>Description</label><textarea id=desc class=form-input rows=2>${t.description||""}</textarea></div><div style="display:flex;gap:16px"><div class="form-group" style="flex:1"><label for=cat>Category</label><input type=text id=cat class=form-input value="${t.category||""}" placeholder="e.g., Backend"></div><div class="form-group" style="flex:1"><label for=priority>Priority</label><select id=priority class=form-select>${priorities.map(p=>`<option value=${p} ${p===(t.priority||"Medium")?"selected":""}>${p}</option>`).join("")}</select></div></div><div class=form-group><label for=assign>Assign To</label><select id=assign class=form-select><option value="">Unassigned</option>${team.map(m=>`<option value=${m.id} ${m.id===t.assignedTo?"selected":""}>${m.name}</option>`).join("")}</select></div><div style="display:flex;gap:16px"><div class="form-group" style="flex:1"><label for=start>Start Date</label><input type=date id=start class=form-input value="${t.startDate||""}" required></div><div class="form-group" style="flex:1"><label for=end>End Date</label><input type=date id=end class=form-input value="${t.endDate||""}" required></div></div><button type=submit class="btn btn-primary">Save Task</button></form>`}
    createMilestoneForm(m={}){return`<form id="form" data-id="${m.id}"><div class=form-group><label for=name>Milestone Name</label><input type=text id=name class=form-input value="${m.name||""}" required></div><div style="display:flex;gap:16px"><div class="form-group" style="flex:1"><label for=start>Start Date</label><input type=date id=start class=form-input value="${m.startDate||""}" required></div><div class="form-group" style="flex:1"><label for=end>End Date</label><input type=date id=end class=form-input value="${m.endDate||""}" required></div></div><button type=submit class="btn btn-primary">Save Milestone</button></form>`}
    createStatusForm(s={}){return`<form id="form" data-id="${s.id}"><div class=form-group><label for=name>Status Name</label><input type=text id=name class=form-input value="${s.name||""}" required></div><div class=form-group><label for=progress>Progress: <span id=progress-val>${s.progress||0}%</span></label><input type=range id=progress class=form-input value="${s.progress||0}" min=0 max=100></div><div class=form-group><label for=color>Color</label><input type=color id=color value="${s.color||"#e74c3c"}"></div><button type=submit class="btn btn-primary">Save Status</button></form>`}
    createGanttPhaseForm(p={}){return`<form id="form" data-id="${p.id}"><div class=form-group><label for=name>Phase Name</label><input type=text id=name class=form-input value="${p.name||""}" required></div><div style="display:flex;gap:16px;align-items:center;"><div class="form-group" style="flex:1"><label for=start>Start Date</label><input type=date id=start class=form-input value="${p.startDate||""}" required></div><div class="form-group" style="flex:1"><label for=end>End Date</label><input type=date id=end class=form-input value="${p.endDate||""}" required></div><div class=form-group><label for=color>Color</label><input type=color id=color value="${p.color||"#e74c3c"}"></div></div><button type=submit class="btn btn-primary">Save Phase</button></form>`}
    createRiskForm(r={}){const impacts=["Low","Medium","High","Critical"],priorities=["Low","Medium","High"];return`<form id="form" data-id="${r.id}"><div class=form-group><label for=desc>Description</label><textarea id=desc class=form-input rows=3 required>${r.description||""}</textarea></div><div style="display:flex;gap:16px;"><div class="form-group" style="flex:1"><label for=impact>Impact</label><select id=impact class=form-select>${impacts.map(i=>`<option value="${i}" ${i===(r.impact||"Medium")?"selected":""}>${i}</option>`).join("")}</select></div><div class="form-group" style="flex:1"><label for=priority>Priority</label><select id=priority class=form-select>${priorities.map(p=>`<option value="${p}" ${p===(r.priority||"Medium")?"selected":""}>${p}</option>`).join("")}</select></div></div><button type=submit class="btn btn-primary">Save Risk</button></form>`}
    formatDate(d,long=!1){if(!d)return"N/A";const t=new Date(d);return t.setMinutes(t.getMinutes()+t.getTimezoneOffset()),long?t.toLocaleDateString("en-US",{month:"long",day:"numeric",year:"numeric"}):t.toLocaleDateString()}
    openModal(title,content){this.modal.title.textContent=title,this.modal.body.innerHTML=content,this.modal.container.classList.add("visible")}
    closeModal(){this.modal.container.classList.remove("visible")}
    renderTaskFilters(team, tasks) {
        const memberFilter = document.getElementById('task-filter-member');
        const categoryFilter = document.getElementById('task-filter-category');
        
        const currentMember = memberFilter.value;
        memberFilter.innerHTML = '<option value="all">All Members</option>';
        team.forEach(member => {
            const option = document.createElement('option');
            option.value = member.id;
            option.textContent = member.name;
            memberFilter.appendChild(option);
        });
        memberFilter.value = currentMember;

        const currentCategory = categoryFilter.value;
        const categories = [...new Set(tasks.map(t => t.category).filter(Boolean))];
        categoryFilter.innerHTML = '<option value="all">All Categories</option>';
        categories.forEach(cat => {
            const option = document.createElement('option');
            option.value = cat;
            option.textContent = cat;
            categoryFilter.appendChild(option);
        });
        categoryFilter.value = currentCategory;
    }
}
export const ui=new UI;

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ProjectFlow - Management System</title>
    <link rel="stylesheet" href="style.css">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
</head>
<body>
    <div id="offline-banner">
        <span>You are currently offline. Some features may not be available.</span>
    </div>
    <!-- Auth View (Login/Register) -->
    <div id="auth-view" style="display: none;">
        <div class="auth-container">
            <div class="auth-form-container" id="login-container">
                <form id="login-form">
                    <h2>Login</h2>
                    <div class="form-group">
                        <label for="login-email">Email</label>
                        <input type="email" id="login-email" class="form-input" required>
                    </div>
                    <div class="form-group">
                        <label for="login-password">Password</label>
                        <input type="password" id="login-password" class="form-input" required>
                    </div>
                    <button type="submit" class="btn btn-primary">Login</button>
                    <p class="auth-toggle">Don't have an account? <a href="#" id="show-register">Register</a></p>
                </form>
            </div>
            <div class="auth-form-container" id="register-container" style="display: none;">
                <form id="register-form">
                    <h2>Register</h2>
                    <div class="form-group">
                        <label for="register-name">Full Name</label>
                        <input type="text" id="register-name" class="form-input" required>
                    </div>
                    <div class="form-group">
                        <label for="register-email">Email</label>
                        <input type="email" id="register-email" class="form-input" required>
                    </div>
                    <div class="form-group">
                        <label for="register-password">Password</label>
                        <input type="password" id="register-password" class="form-input" required>
                    </div>
                    <button type="submit" class="btn btn-primary">Register</button>
                    <p class="auth-toggle">Already have an account? <a href="#" id="show-login">Login</a></p>
                </form>
            </div>
        </div>
    </div>

    <!-- Main App Container -->
    <div id="app-container" style="display: none;">
        <aside id="sidebar">
            <div class="sidebar-header"><h2>ProjectFlow</h2></div>
            <div class="project-management-section">
                <h3>Select Project</h3>
                <select id="project-selector" class="form-input"></select>
            </div>
            <nav class="sidebar-nav">
                <ul>
                    <li><a href="#" class="nav-link active" data-view="dashboard">Dashboard</a></li>
                    <li><a href="#" class="nav-link" data-view="status">Status</a></li>
                    <li><a href="#" class="nav-link" data-view="tasks">Tasks</a></li>
                    <li><a href="#" class="nav-link" data-view="gantt">Gantt Chart</a></li>
                    <li><a href="#" class="nav-link" data-view="team">Team</a></li>
                    <li><a href="#" class="nav-link" data-view="milestones">Milestones</a></li>
                    <li><a href="#" class="nav-link" data-view="risks">Risks</a></li>
                    <!-- Admin-only link -->
                    <li id="admin-nav-link" style="display:none;"><a href="#" class="nav-link" data-view="admin">Admin</a></li>
                    <li id="projects-admin-nav-link" style="display:none;"><a href="#" class="nav-link" data-view="projects-admin">Projects</a></li>
                    <!-- Add this list item to the sidebar navigation list -->
                    <li><a href="#" class="nav-link" data-view="settings">Settings</a></li>
                </ul>
            </nav>
            <div class="sidebar-footer">
                <div id="current-user-info" style="text-align: center; margin-bottom: 10px; font-size: 0.9em;"></div>
                <button id="logout-btn" class="btn btn-small">Logout</button>
            </div>
        </aside>

        <main id="main-content">
            <button id="mobile-menu-toggle" class="btn-icon"><svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="3" y1="12" x2="21" y2="12"></line><line x1="3" y1="6" x2="21" y2="6"></line><line x1="3" y1="18" x2="21" y2="18"></line></svg></button>
            
            <section id="dashboard-view" class="view active"><header class="view-header"><h1>Dashboard</h1><h2 id="dashboard-project-name" class="current-project-title"></h2></header><div id="dashboard-content"></div></section>
            <section id="status-view" class="view"><header class="view-header"><h1>Development Status</h1><button id="add-status-item-btn" class="btn btn-primary">Add Status Item</button></header><div id="status-list" class="content-container"></div></section>
            
            <section id="tasks-view" class="view">
                <header class="view-header">
                    <h1>Tasks</h1>
                    <button id="add-task-btn" class="btn btn-primary">Add Task</button>
                </header>
                <div class="tabs">
                    <button class="tab-link active" data-tab="pending">Pending</button>
                    <button class="tab-link" data-tab="finished">Finished</button>
                </div>
                <div class="task-filters card">
                    <select id="task-filter-member" class="form-select"><option value="all">All Members</option></select>
                    <select id="task-filter-priority" class="form-select">
                        <option value="all">All Priorities</option>
                        <option value="High">High</option>
                        <option value="Medium">Medium</option>
                        <option value="Low">Low</option>
                    </select>
                    <select id="task-filter-category" class="form-select"><option value="all">All Categories</option></select>
                </div>
                <div id="task-list-pending" class="content-container tab-content active"></div>
                <div id="task-list-finished" class="content-container tab-content"></div>
            </section>

            <section id="gantt-view" class="view"><header class="view-header"><h1>Gantt Chart (Phases)</h1><div><button id="add-gantt-phase-btn" class="btn btn-primary">Create Phase</button><button id="print-gantt-btn" class="btn" data-tooltip="Print chart as PNG">Print Chart</button></div></header><div id="gantt-chart-container" class="card"></div></section>
            <section id="team-view" class="view"><header class="view-header"><h1>Team Members</h1><button id="add-member-to-project-btn" class="btn btn-primary">Add Member to Project</button></header><div id="team-grid" class="content-container"></div></section>
            <section id="milestones-view" class="view"><header class="view-header"><h1>Milestones</h1><button id="add-milestone-btn" class="btn btn-primary">Create Milestone</button></header><div id="milestone-list" class="content-container"></div></section>
            <section id="risks-view" class="view"><header class="view-header"><h1>Risk Management</h1><button id="add-risk-btn" class="btn btn-primary">Add Risk</button></header><div id="risk-table-container" class="content-container"></div></section>
            <section id="team-member-profile-view" class="view"><div id="team-member-profile-content"></div></section>
            
            <!-- Admin View -->
            <section id="admin-view" class="view">
                <header class="view-header">
                    <h1>Admin - User Management</h1>
                    <button id="add-user-btn" class="btn btn-primary">Add New User</button>
                </header>
                <div id="admin-user-list" class="content-container card"></div>
            </section>

            <section id="projects-admin-view" class="view">
                <header class="view-header">
                    <h1>Project Management</h1>
                    <button id="add-project-admin-btn" class="btn btn-primary">Add New Project</button>
                </header>
                <div id="projects-admin-list" class="content-container card">
                    <!-- Project table will be rendered here by ui.js -->
                </div>
            </section>

            <!-- Add this section with the other <section> views -->
            <section id="settings-view" class="view">
                <header class="view-header"><h1>Settings</h1></header>
                <div id="settings-content" class="content-container card" style="max-width: 500px;">
                    <h3>Change Password</h3>
                    <form id="change-password-form">
                        <div class="form-group">
                            <label for="new-password">New Password</label>
                            <input type="password" id="new-password" class="form-input" required>
                        </div>
                        <div class="form-group">
                            <label for="confirm-password">Confirm New Password</label>
                            <input type="password" id="confirm-password" class="form-input" required>
                        </div>
                        <button type="submit" class="btn btn-primary">Update Password</button>
                    </form>
                </div>
            </section>
        </main>
    </div>

    <div id="modal-container"><div class="modal-backdrop"></div><div class="modal-content"><div class="modal-header"><h2 id="modal-title"></h2><button id="modal-close-btn" class="btn-icon">×</button></div><div id="modal-body" class="modal-body"></div></div></div>
    <div id="loader"><div class="spinner"></div></div>

    <!-- Firebase SDK -->
    <script src="https://www.gstatic.com/firebasejs/9.15.0/firebase-app-compat.js"></script>
    <script src="https://www.gstatic.com/firebasejs/9.15.0/firebase-database-compat.js"></script>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
    <script type="module" src="js/app.js"></script>
</body>
</html>

:root {
    --bg-color:#F7F7F7; --main-bg:#FFFFFF; --text-color:#2c3e50; --text-light:#7f8c8d; --accent-color:#e74c3c; --accent-dark:#c0392b; --sidebar-bg:#212529; --sidebar-text:#ecf0f1; --border-color:#e0e0e0; --shadow-color:rgba(0,0,0,0.05); --danger-color:#e74c3c; --priority-high:#e74c3c; --priority-medium:#f39c12; --priority-low:#3498db;
}
*,*::before,*::after{box-sizing:border-box;margin:0;padding:0}
html,body{height:100%;overflow:hidden}
body{font-family:'Inter',sans-serif;background-color:var(--bg-color);color:var(--text-color);font-size:16px;line-height:1.6}
h1,h2,h3{font-weight:600;line-height:1.3}h1{font-size:2rem}h2{font-size:1.5rem}h3{font-size:1.1rem}
#app-container{display:grid;grid-template-columns:260px 1fr;height:100vh}
#sidebar{background-color:var(--sidebar-bg);color:var(--sidebar-text);display:flex;flex-direction:column;z-index:1001;overflow-y:auto;overflow-x:hidden}
.sidebar-header{padding:24px;display:flex;align-items:center;position:sticky;top:0;background:var(--sidebar-bg);z-index:1}
.project-management-section{padding:16px 24px;border-top:1px solid rgba(255,255,255,.1);border-bottom:1px solid rgba(255,255,255,.1)}
.project-selector-header{display:flex;justify-content:space-between;align-items:center;margin-bottom:8px}
.sidebar-nav ul{list-style:none;padding:16px 0}
.sidebar-nav .nav-link{display:block;color:var(--sidebar-text);padding:12px 24px;font-weight:500;border-left:3px solid transparent;transition:background-color .2s,border-left-color .2s}
.sidebar-nav .nav-link:hover{background-color:rgba(255,255,255,.05)}
.sidebar-nav .nav-link.active{background-color:rgba(255,255,255,.1);border-left-color:var(--accent-color);color:#fff}
.sidebar-footer{margin-top:auto;padding:16px 24px;display:grid;gap:10px;border-top:1px solid rgba(255,255,255,.1)}
#main-content{padding:32px;overflow-y:auto;position:relative}
.view{display:none}.view.active{display:block;animation:fadeIn .4s ease-in-out}@keyframes fadeIn{from{opacity:0;transform:translateY(10px)}to{opacity:1;transform:translateY(0)}}
.view-header{display:flex;justify-content:space-between;align-items:center;margin-bottom:32px;flex-wrap:wrap;gap:16px}
.content-container{display:grid;gap:16px}
.card{background-color:var(--main-bg);border-radius:8px;padding:24px;box-shadow:0 4px 12px var(--shadow-color);width:100%}
.btn{display:inline-block;padding:10px 20px;border-radius:6px;border:none;font-weight:500;font-size:.95rem;cursor:pointer;transition:all .2s ease-in-out;background-color:var(--border-color);color:var(--text-color)}
.btn:hover{transform:translateY(-2px);box-shadow:0 2px 8px rgba(0,0,0,.1)}
.btn.btn-primary{background-color:var(--accent-color);color:#fff}.btn.btn-primary:hover{background-color:var(--accent-dark)}
.btn.btn-danger{background-color:var(--danger-color);color:#fff}
.btn.btn-small{padding:8px 12px;font-size:.85rem;width:100%;text-align:center}
.btn-icon{background:0 0;border:none;cursor:pointer;padding:4px;color:var(--text-light);border-radius:50%;width:32px;height:32px;display:flex;align-items:center;justify-content:center;transition:all .2s ease}
.item-actions .btn-icon:hover{background-color:var(--bg-color);color:var(--text-color)}
.form-input,.form-select{width:100%;padding:10px;border:1px solid var(--border-color);border-radius:6px;font-size:1rem;background-color:var(--main-bg)}
.form-input:focus,.form-select:focus{outline:0;border-color:var(--accent-color);box-shadow:0 0 0 2px rgba(231,76,60,.2)}
.form-group{margin-bottom:16px}.form-group label{display:block;margin-bottom:8px;font-weight:500}
.form-group input[type=file]{display:none}.form-group input[type=color]{width:50px;height:30px;padding:2px;border:1px solid var(--border-color);cursor:pointer}
.custom-file-upload{border:1px solid var(--border-color);display:inline-block;padding:8px 12px;cursor:pointer;border-radius:6px;background-color:var(--bg-color)}
.avatar-preview{width:80px;height:80px;border-radius:50%;background-color:var(--bg-color);margin-top:10px;background-size:cover;background-position:center;border:2px solid var(--border-color)}
#team-grid {
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
}
.team-member-card {
    padding: 24px;
    cursor: pointer;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
}
.team-member-card:hover {
    transform: translateY(-4px);
    box-shadow: 0 8px 16px rgba(0,0,0,0.07);
}
.team-member-card h3 {
    font-size: 1.25rem;
    margin-bottom: 4px;
}
.team-member-card p {
    color: var(--text-light);
    margin-bottom: 16px;
}
.member-card-tasks {
    font-size: 0.85rem;
    color: var(--text-light);
    border-top: 1px solid var(--border-color);
    padding-top: 12px;
}
.member-card-tasks ul {
    list-style-type: none;
    padding-left: 0;
}
.member-card-tasks li {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    padding: 2px 0;
}
.item-actions{margin-left:auto;display:flex;gap:8px;align-items:center}
.task-item{display:flex;align-items:center;gap:16px;padding:16px}
.task-item-checkbox{width:20px;height:20px;border:2px solid var(--border-color);border-radius:4px;cursor:pointer;flex-shrink:0;-webkit-appearance:none;appearance:none}
.task-item-checkbox:checked{background-color:var(--accent-color);border-color:var(--accent-color);background-image:url("data:image/svg+xml,%3csvg viewBox='0 0 16 16' fill='white' xmlns='http://www.w3.org/2000/svg'%3e%3cpath d='M12.207 4.793a1 1 0 010 1.414l-5 5a1 1 0 01-1.414 0l-2-2a1 1 0 011.414-1.414L6.5 9.086l4.293-4.293a1 1 0 011.414 0z'/%3e%3c/svg%3e")}
.task-item-info{display:flex;flex-direction:column;gap:4px}
.task-name{font-weight:500}.task-name.completed{text-decoration:line-through;color:var(--task-completed-text)}
.task-metadata{font-size:.85rem;color:var(--text-light);display:flex;align-items:center;gap:12px;flex-wrap:wrap}
.priority-pill{padding:2px 8px;border-radius:12px;font-size:.75rem;font-weight:600;color:#fff}
.priority-pill.high{background-color:var(--priority-high)}.priority-pill.medium{background-color:var(--priority-medium)}.priority-pill.low{background-color:var(--priority-low)}
.tabs{margin-bottom:24px;border-bottom:1px solid var(--border-color);display:flex;gap:24px}
.tab-link{padding:8px 16px;border:none;background:0 0;cursor:pointer;font-size:1rem;font-weight:500;color:var(--text-light);border-bottom:3px solid transparent;margin-bottom:-1px}
.tab-link.active{color:var(--text-color);border-bottom-color:var(--accent-color)}
.tab-content{display:none}.tab-content.active{display:grid}
.task-filters{display:flex;gap:16px;padding:16px;margin-bottom:16px;}
.status-item{display:grid;grid-template-columns:200px 1fr auto;align-items:center;gap:24px;padding:16px}
.status-item-info{display:flex;flex-direction:column}
.status-item-name{font-weight:600}
.status-item-percentage-text{font-size:.9rem;color:var(--text-light)}
.status-progress-bar-container{height:8px;width:100%;background-color:var(--bg-color);border-radius:4px;overflow:hidden}
.status-progress-bar-fill{height:100%;transition:width .3s ease}
#modal-container{position:fixed;top:0;left:0;width:100%;height:100%;z-index:1001;display:flex;align-items:center;justify-content:center;opacity:0;visibility:hidden;transition:opacity .3s,visibility .3s}
#modal-container.visible{opacity:1;visibility:visible}
.modal-backdrop{position:absolute;top:0;left:0;width:100%;height:100%;background-color:rgba(0,0,0,.6)}
.modal-content{position:relative;background-color:var(--main-bg);padding:24px;border-radius:8px;width:90%;max-width:500px;z-index:1002;transform:translateY(-20px);transition:transform .3s}
#modal-container.visible .modal-content{transform:translateY(0)}
.modal-header{display:flex;justify-content:space-between;align-items:center;padding-bottom:16px;margin-bottom:16px;border-bottom:1px solid var(--border-color)}
#modal-close-btn{font-size:2rem;font-weight:300;line-height:1;color:var(--text-color)}
#modal-close-btn:hover{color:var(--accent-color);background:0 0}
.modal-body{max-height:70vh;overflow-y:auto}
#loader{position:fixed;top:0;left:0;width:100%;height:100%;background-color:rgba(255,255,255,.8);z-index:9999;display:flex;align-items:center;justify-content:center;visibility:hidden;opacity:0;transition:opacity .3s,visibility .3s}
#loader.visible{visibility:visible;opacity:1}
.spinner{width:50px;height:50px;border:5px solid var(--border-color);border-top-color:var(--accent-color);border-radius:50%;animation:spin 1s linear infinite}@keyframes spin{to{transform:rotate(360deg)}}
[data-tooltip]{position:relative}[data-tooltip]::after{content:attr(data-tooltip);position:absolute;bottom:120%;left:50%;transform:translateX(-50%);background-color:var(--text-color);color:#fff;padding:6px 12px;border-radius:4px;font-size:.85rem;white-space:nowrap;opacity:0;visibility:hidden;transition:all .2s;z-index:100;pointer-events:none}
[data-tooltip]:hover::after{opacity:1;visibility:visible;transform:translateX(-50%) translateY(-4px)}
#mobile-menu-toggle{display:none;position:fixed;top:16px;left:16px;z-index:1002;background-color:var(--main-bg);border-radius:8px;box-shadow:0 2px 8px rgba(0,0,0,.1);color:var(--text-color)}
.gantt-chart-container{padding:0;display:flex;flex-direction:column;min-height:500px}
.gantt-body{display:flex;gap:24px;padding:16px;flex-grow:1;min-height:0}
.gantt-zoom-controls{display:flex;flex-direction:column;gap:8px;flex-shrink:0}
.gantt-zoom-controls button{width:100px;padding:8px 12px;background-color:var(--bg-color);border:1px solid var(--border-color);font-weight:500}
.gantt-zoom-controls button:hover{background-color:var(--border-color);transform:none;box-shadow:none}
.gantt-zoom-controls button.active{background-color:var(--accent-color);color:#fff;border-color:var(--accent-color)}
.gantt-timeline-wrapper{flex-grow:1;overflow-x:auto;position:relative;border-left:1px solid var(--border-color);padding-left:10px}
.gantt-timeline-header{display:flex;position:sticky;top:0;background-color:var(--main-bg);z-index:10;padding-bottom:5px;border-bottom:2px solid var(--border-color)}
.gantt-timeline-unit{flex-shrink:0;text-align:center;font-size:12px;color:var(--text-light);border-right:1px solid var(--border-color);padding:0 5px}
.gantt-grid{position:relative;background-image:linear-gradient(to right,var(--border-color) 1px,transparent 1px)}
.gantt-phase-bar{position:absolute;height:35px;border-radius:4px;display:flex;align-items:center;justify-content:space-between;color:#fff;user-select:none;padding:0 12px;cursor:pointer;transition:filter .2s}
.gantt-phase-bar:hover{filter:brightness(1.1)}.gantt-phase-bar.active{box-shadow:0 0 0 3px var(--accent-dark);z-index:5}
.gantt-phase-name{font-weight:500;pointer-events:none;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}
.gantt-delete-btn{font-size:1.3rem;line-height:1;color:#fff;background-color:rgba(0,0,0,.3);border-radius:50%;width:24px;height:24px;border:none;cursor:pointer;display:none;flex-shrink:0;margin-left:8px}
.gantt-phase-bar:hover .gantt-delete-btn{display:flex;align-items:center;justify-content:center}
.gantt-delete-btn:hover{background-color:rgba(0,0,0,.5)}
.gantt-edit-form-container{padding:24px;border-top:2px solid var(--border-color);display:none}
.gantt-edit-form-container.visible{display:block;animation:fadeIn .3s}
.table-container{overflow-x:auto}.styled-table{width:100%;border-collapse:collapse}
.styled-table thead th{background-color:var(--bg-color);padding:12px;text-align:left;font-weight:600;border-bottom:2px solid var(--border-color)}
.styled-table tbody td{padding:12px;border-bottom:1px solid var(--border-color)}
.profile-header{display:flex;gap:24px;align-items:center;margin-bottom:32px}
.profile-avatar{width:100px;height:100px;flex-shrink:0}
.profile-info h2{margin:0;font-size:1.8rem}
.profile-rating{font-size:1.1rem;font-weight:600}
.profile-rating.excellent{color:#27ae60}.profile-rating.good{color:#2980b9}.profile-rating.needs-improvement{color:#f39c12}
*::-webkit-scrollbar{width:8px;height:8px} *::-webkit-scrollbar-track{background:var(--bg-color)} *::-webkit-scrollbar-thumb{background-color:#c1c1c1;border-radius:10px;border:2px solid var(--bg-color)} *::-webkit-scrollbar-thumb:hover{background-color:#a8a8a8}
@media (max-width:992px){
#app-container{grid-template-columns:1fr}
#sidebar{position:fixed;height:100%;transform:translateX(-100%);box-shadow:4px 0 15px rgba(0,0,0,.2)}
#sidebar.open{transform:translateX(0)}
#main-content{padding:16px;padding-top:64px}
#mobile-menu-toggle{display:flex}
.status-item{grid-template-columns:1fr;text-align:center}.item-actions{justify-content:center}
.profile-header{flex-direction:column;text-align:center}
.task-filters{flex-direction:column}
.task-item{flex-wrap: wrap;}
}

/* Auth View Styles */
#auth-view {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100vw;
    height: 100vh;
    background-color: var(--bg-color);
}
.auth-container {
    width: 100%;
    max-width: 400px;
}
.auth-form-container {
    padding: 32px;
    background-color: var(--main-bg);
    border-radius: 8px;
    box-shadow: 0 4px 12px var(--shadow-color);
}
.auth-toggle {
    margin-top: 16px;
    text-align: center;
    font-size: 0.9em;
}

/* Admin Table Styles */
.styled-table .item-actions {
    justify-content: flex-end;
}

.emoji-avatar {
    font-size: 2.5rem; /* Makes the emoji larger */
    line-height: 1;
    flex-shrink: 0;
    width: 50px;
    height: 50px;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: var(--bg-color);
    border-radius: 50%;
}

.dashboard-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 24px;
}
.stat-card { text-align: center; }
.stat-big-number { font-size: 3rem; font-weight: 700; color: var(--accent-color); margin: 8px 0; }
.progress-bar-container { height: 8px; width: 100%; background-color: var(--bg-color); border-radius: 4px; overflow: hidden; margin-top: 8px; }
.progress-bar-fill { height: 100%; background-color: var(--accent-color); transition: width .3s ease; }
.empty-state { color: var(--text-light); padding-top: 16px; text-align: center; }

.dashboard-task-list {
    margin-top: 16px;
    max-height: 250px;
    overflow-y: auto;
    padding-right: 10px;
}
.dashboard-task-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 10px 0;
    border-bottom: 1px solid var(--border-color);
    font-size: 0.9em;
}
.dashboard-task-item:last-child { border-bottom: none; }
.task-due-date { color: var(--text-light); flex-shrink: 0; margin-left: 16px; }

.dashboard-status-list {
    margin-top: 16px;
    display: flex;
    flex-direction: column;
    gap: 16px;
}
.dashboard-status-info {
    display: flex;
    justify-content: space-between;
    font-size: 0.9em;
}

@media (max-width: 992px) {
    .dashboard-grid {
        grid-template-columns: 1fr;
    }
}

#offline-banner {
    position: fixed;
    bottom: -100px; /* Start hidden below the screen */
    left: 50%;
    transform: translateX(-50%);
    background-color: #2c3e50;
    color: #ecf0f1;
    padding: 12px 24px;
    border-radius: 8px 8px 0 0;
    z-index: 9999;
    font-weight: 500;
    box-shadow: 0 -2px 10px rgba(0,0,0,0.2);
    transition: bottom 0.5s ease-in-out;
}

body.offline #offline-banner {
    bottom: 0; /* Slide in when offline */
}